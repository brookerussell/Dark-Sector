#ifndef NEUTRALMESONPRODUCTION_CXX
#define NEUTRALMESONPRODUCTION_CXX

#include "NeutralMesonProduction.h"

// ##########################################################################
// ###  This code takes in the simulated Pi0 production from the BNB      ###
// ### code and then produces the heavier mesons which could have been    ###
// ###    created instead (e.g. eta, rho, omega, eta prime, phi)          ###
// ###                                                                    ###
// ###      Once created, it then distributes the remaining energy and    ###
// ### momentum such that Px_initial / Ptot_inital = Px_final/ Ptot_final ###
// ###                                                                    ###
// ###           OUTPUT: the kinematic information for the                ###
// ###            created eta, rho, omega, eta prime, phi                 ###
// ##########################################################################

void NeutralMesonProduction::NMP()
{
  TFile* f = new TFile("Pizero_input.root");
  TTree *pz = (TTree*)f->Get("pz");

  // Instantiating variables to read the Pi0 ntuple
  Int_t nevent,numberpizeros;
  Double_t pizeroPx,pizeroPy,pizeroPz,pizeroE;
  
  // Grabbing the branches from TFile f for the Pi0
  pz->SetBranchAddress("nevent",&nevent); // Event number
  pz->SetBranchAddress("numberpizeros",&numberpizeros); // Pizero unique number
  pz->SetBranchAddress("pizeroPx",&pizeroPx); // Pi0 Px
  pz->SetBranchAddress("pizeroPy",&pizeroPy); // Pi0 Py
  pz->SetBranchAddress("pizeroPz",&pizeroPz); // Pi0 Pz
  pz->SetBranchAddress("pizeroE",&pizeroE); // Pi0 E

  TFile* fout = TFile::Open("NeutralMesonProduction_output.root","RECREATE");
  TTree nmp("nmp",""); 
  
  
  // Useful variables for storing the created mesons
  int uniqueMeson,Pi0ToMeson;
  float mesonID,mesonMass;
  double mesonPx,mesonPy,mesonPz,mesonE;
  TLorentzVector meson;
  nmp.Branch("eventnum",&eventnum,"eventnum/I"); // Event number
  nmp.Branch("uniqueMeson",&uniqueMeson,"uniqueMeson/I"); // # to track Meson 
  nmp.Branch("Pi0ToMeson",&Pi0ToMeson,"Pi0ToMeson/I"); // Links meson to Pi0 mother
   nmp.Branch("mesonID",&mesonID,"mesonID/F"); // Meson ID
  nmp.Branch("mesonMass",&mesonMass,"mesonMass/F"); // Meson mass
  nmp.Branch("meson",&meson); // Meson 4-vector (E,P)
  nmp.Branch("mesonPx",&mesonPx,"mesonPx/D"); // Meson Px
  nmp.Branch("mesonPy",&mesonPy,"mesonPy/D"); // Meson Py
  nmp.Branch("mesonPz",&mesonPz,"mesonPz/D"); // Meson Pz
  nmp.Branch("mesonE",&mesonE,"mesonE/D"); // Meson E

  int ctr = 0; // Instantiate counter for unique meson

  Int_t nentries = (Int_t)pz->GetEntries(); // Grabbing the # of events (POT)
  
  std::cout << "START neutral meson production."<<std::endl;

  for(Int_t i=0; i<nentries; i++) // Looping over all events
    {
      //if(i % 10000 == 0){std::cout<<"Event = "<<i<<std::endl;}  

      pz->GetEntry(i);

      eventnum = nevent; // Catalogue event number

      // Setting a vector of mass's (in GeV) of the particles 
      // that we are "faking" their creation; 
      // Eta = 0.547 GeV, Omega = 0.775 GeV, Rho = 0.783 GeV, 
      // Eta prime = 0.958 GeV, Phi = 1.02 GeV   
      float fakeMass[5] = {0.54785,0.77526,0.78265,0.95778,1.019461};
	  
      // Looping over array of "fake" particle masses
      for(const auto& fM : fakeMass)
	{
	  if((pizeroE*pizeroE)>(fM*fM))
	    {
	      // 3-momentum of the new meson; p = sqrt(E^2 - m^2)
	      float fakePnew = sqrt((pizeroE*pizeroE)-(fM*fM));
	      
	      // Energy of the new momentum; E =  sqrt (P^2 - m^2)
	      double fakeE = sqrt( (fakePnew*fakePnew) + (fM*fM) );
	      
	      // Pi0 3-momentum                           
	      float pi0Momentum = sqrt(pizeroPx*pizeroPx+
				       pizeroPy*pizeroPy+
				       pizeroPz*pizeroPz);

	      // Assigning meson component momentum (e.g. px, py, pz)  
	      // in a similar ratio as original pi0 component momentum 
	      double fakePx = (fakePnew*pizeroPx)/pi0Momentum; 
	      double fakePy = (fakePnew*pizeroPy)/pi0Momentum;
	      double fakePz = (fakePnew*pizeroPz)/pi0Momentum;
		  
	      // Assign TBranches
	      mesonPx = fakePx;
	      mesonPy = fakePy;
	      mesonPz = fakePz;
	      mesonE = fakeE;
	      meson.SetPxPyPzE(fakePx,
			       fakePy,
			       fakePz,
			       fakeE);

	      uniqueMeson = ctr++; // Unique # to track each meson
	      Pi0ToMeson = numberpizeros; // Links meson to Pi0 mother
	      
	      // Meson id variable definition
	      float id; // meson id
	      if (fM == fakeMass[0]){ id = 1; } // Eta
	      if (fM == fakeMass[1]){ id = 2; } // Omega
	      if (fM == fakeMass[2]){ id = 3; } // Rho
	      if (fM == fakeMass[3]){ id = 4; } // Eta prime
	      if (fM == fakeMass[4]){ id = 5; } // Rho
	      
	      // Assign TBranches
	      mesonMass = fM; // Meson mass in GeV 	  
	      mesonID = id; // Meson particle ID (1-5)
	      
	      meson.Clear(); // Clear 4-vector
	      
	      nmp.Fill(); // Fill tree

	    } // <-- end if energy^2 > mass^2
	} // <-- end fakeMass loop
    } // <-- end i loop
  std::cout<< "MADE neutral mesons from Pi0s."<<std::endl; 
  f->Close(); 
  fout->Write(); 
} // <-- end void


#endif
